import groovy.json.JsonSlurper

buildscript {
  ext.kotlinVersion = '1.1.0'
  ext.shadowPluginVersion = '1.2.3'

  repositories {
    jcenter()
  }

  dependencies {
    classpath "com.github.jengelman.gradle.plugins:shadow:${shadowPluginVersion}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
  }
}

plugins {
  id 'de.undercouch.download' version '3.2.0'
}

apply plugin: 'com.github.johnrengelman.shadow'

import de.undercouch.gradle.tasks.download.Download

if (!JavaVersion.current().java8Compatible) {
  throw new IllegalArgumentException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Upgrade. Try again.'''.stripMargin())
}

group   = 'io.datawire.loom'
version = new BuildInfo().resolveVersion()

new File(".loom/tmp").mkdirs()
new File(".loom/bin").mkdirs()

def osArch = System.getProperty("os.name").toLowerCase()
if (osArch.contains("linux")) {
  osArch = "linux"
} else if (osArch.contains("mac")) {
  osArch = "darwin"
} else if (osArch.contains("windows")) {
  osArch = "windows"
} else {
  throw new IllegalArgumentException("Invalid OS architecture: ${osArch}")
}

ext {
  awsSdkVersion      = '1.11.105'
  jacksonVersion     = '2.9.0.pr1'
  junitVersion       = '4.12'
  logbackVersion     = '1.1.7'
  vertxVersion       = '3.4.1'
  terraformVersion   = '0.9.1'
  terraformArch      = "${osArch}_amd64"
  kopsVersion        = '1.5.3'
  kopsArch           = "${osArch}-amd64"
}

apply plugin: 'kotlin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  jcenter()
  mavenLocal()
}

dependencies {
  compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion

  compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.24'

  compile group: 'com.amazonaws', name: 'aws-java-sdk-core',     version: awsSdkVersion
  compile group: 'com.amazonaws', name: 'aws-java-sdk-s3',       version: awsSdkVersion
  compile group: 'com.amazonaws', name: 'aws-java-sdk-dynamodb', version: awsSdkVersion
  compile group: 'com.amazonaws', name: 'aws-java-sdk-iam', version: awsSdkVersion

  compile group: 'javax.el',          name: 'javax.el-api', version: '2.2.4'
  compile group: 'org.glassfish.web', name: 'el-impl',      version: '2.2'

  compile group: 'com.fasterxml.jackson.core',       name: 'jackson-annotations',            version: jacksonVersion
  compile group: 'com.fasterxml.jackson.module',     name: 'jackson-module-kotlin',          version: jacksonVersion
  compile group: 'com.fasterxml.jackson.module',     name: 'jackson-module-parameter-names', version: jacksonVersion
  compile group: 'com.fasterxml.jackson.datatype',   name: 'jackson-datatype-jdk8',          version: jacksonVersion
  compile group: 'com.fasterxml.jackson.datatype',   name: 'jackson-datatype-jsr310',        version: jacksonVersion
  compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml',        version: jacksonVersion

  compile group: 'io.fabric8', name: 'kubernetes-client', version: '2.1.2'

  compile group: 'com.sparkjava', name: 'spark-core', version: '2.5.5'

  compile group: 'org.apache.commons',   name: 'commons-lang3', version: '3.5'

  compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.4.0.Final'

  compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion
  compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion

  compile group: 'org.zeroturnaround', name: 'zt-exec', version: '1.9'

  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.6.2'
  testCompile group: 'junit',       name: 'junit',        version: junitVersion
}

tasks.withType(Tar) {
  compression = Compression.GZIP
}

task version() {
  println(version)
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.4'
}

kotlin {
  experimental {
    coroutines 'enable'
  }
}

compileKotlin {
  kotlinOptions {
    jvmTarget = '1.8'
  }
}

shadowJar {
  classifier = 'fat'

  manifest {
    attributes 'Main-Class'    : 'io.datawire.loom.RunnerKt'
  }

  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

task mkexecutable(type: Exec) {
  commandLine 'chmod', '+x', '.loom/bin'
}

task downloadKops(type: Download) {
  src "https://github.com/kubernetes/kops/releases/download/${kopsVersion}/kops-${kopsArch}"
  onlyIfNewer true
  dest new File(".loom/bin", "kops")

  doLast {
    project.exec { commandLine('chmod', '+x', '.loom/bin/kops') }
  }
}

task downloadTerraform(type: Download) {
  src "https://releases.hashicorp.com/terraform/${terraformVersion}/terraform_${terraformVersion}_${terraformArch}.zip"
  onlyIfNewer true
  dest new File(".loom/tmp", "terraform_${terraformVersion}_${terraformArch}.zip")
}

task downloadAndUnzipTerraform(dependsOn: downloadTerraform, type: Copy) {
  from zipTree(downloadTerraform.dest)
  into new File(".loom/bin")
}